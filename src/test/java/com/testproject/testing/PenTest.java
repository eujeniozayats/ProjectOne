package com.testproject.testing;


import org.testng.annotations.*;
import org.testng.Assert;

import java.io.ByteArrayOutputStream;
import java.io.Console;
import java.io.PrintStream;


public class PenTest {


    private final ByteArrayOutputStream output = new ByteArrayOutputStream();
    private final int inkValue = 1000;
    private final double sizeLetter = 1.0;
    private final String penColor = "BLUE";
    private final String testWord = "word";

    @DataProvider(name = "WriteOffData")
    public Object[][] createData1() {
        return new Object[][]{
                {3, "CutMe"},

        };
    }

    @DataProvider(name = "EmptyPen")
    public Object[][] createData2() {
        return new Object[][]{
                {0, "CutMe", ""},

        };
    }

    @DataProvider(name = "EmptyString")
    public Object[][] createData3() {
        return new Object[][]{
                {5, "     "},

        };
    }

    @DataProvider(name = "SizeMoreThanInk")
    public Object[][] createData4() {
        return new Object[][]{
                {5, 6.0},

        };
    }

    @DataProvider(name = "Negatives")
    public Object[][] createData5() {
        return new Object[][]{
                {-1, -5},

        };
    }

    @DataProvider(name = "WordIsTooBig")
    public Object[][] createData6() {
        return new Object[][]{
                {20, 10, "ABC", "AB"},

        };
    }

    @DataProvider(name = "InkEqualSize")
    public Object[][] createData7() {
        return new Object[][]{
                {20, 20, "ABC", 1},

        };
    }

    @Test
    public void testFirstConstructor() {
        Pen pen = new Pen(inkValue);
        Assert.assertNotEquals(pen, null);

    }

    @Test
    public void testSecondConstructor() {
        Pen pen = new Pen(inkValue, sizeLetter);
        Assert.assertNotEquals(pen, null);

    }

    @Test
    public void testThirdConstructor() {
        Pen pen = new Pen(inkValue, sizeLetter, penColor);
        Assert.assertNotEquals(pen, null);

    }

    @Test
    public void testWriteOneWord() {
        Pen pen = new Pen(inkValue, sizeLetter, penColor);
        pen.write(testWord);
        Assert.assertTrue(pen.isWork());

    }

    @Test
    public void testIfColorIsRight() {
        Pen pen = new Pen(inkValue, sizeLetter, penColor);
        Assert.assertEquals(penColor, pen.getColor());

    }

    @Test(dataProvider = "WriteOffData")
    public void testWriteOff(int inkContainerValue, String word) {
        Pen pen = new Pen(inkContainerValue);
        String wordTest = pen.write(word);
        Assert.assertFalse(pen.isWork());


    }
    @Test(dataProvider = "WriteOffData")
    public void testWriteOff2(int inkContainerValue, String word) {
        Pen pen = new Pen(inkContainerValue);
        String wordCut = pen.write(word);
        Assert.assertEquals(wordCut.length(), inkContainerValue);

    }
    @Test(dataProvider = "WriteOffData")
    public void testPenInkValueLeft(int inkContainerValue, String word) {
        Pen pen = new Pen(inkContainerValue);
        String wordCut = pen.write(word);
        int valueLeft = pen.getInkContainerValue();
        Assert.assertEquals(valueLeft, pen.getInkContainerValue());

    }

    @Test(dataProvider = "EmptyPen")
    public void testEmptyPen(int inkContainerValue, String word, String emptyValue) {
        Pen pen = new Pen(inkContainerValue);
        String wordEmpty = pen.write(word);
        Assert.assertEquals(wordEmpty, emptyValue);

    }

    @Test
    public void testDoSomethingElse() {
        System.setOut(new PrintStream(output));
        Pen pen = new Pen(inkValue);
        pen.doSomethingElse();
        Assert.assertEquals(pen.getColor(), output.toString().trim());
    }

    @Test(dataProvider = "EmptyString")
    public void testWriteEmptyString(int inkContainerValue, String emptyString) {
        Pen pen = new Pen(inkContainerValue);
        String emptyWord = pen.write(emptyString);
        Assert.assertTrue(pen.isWork());
    }

    @Test(dataProvider = "SizeMoreThanInk")
    public void testSizeMoreThanInks(int inkContainerValue, double sizeLetter) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        if (sizeLetter > inkContainerValue) {
            Assert.fail("Word size is bigger than ink capacity");
        }
    }

    @Test(dataProvider = "Negatives")
    public void testSetNegatives(int inkContainerValue, double sizeLetter) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        if (sizeLetter < 0 | inkContainerValue < 0) {
            Assert.fail("You can't use negatives");
        }
    }

    @Test(dataProvider = "WordIsTooBig")
    public void testSubstring(int inkContainerValue, double sizeLetter, String bigWord, String fitWord) {
        Pen pen = new Pen(inkContainerValue, sizeLetter, bigWord);
        String word = pen.write(bigWord);

        if (bigWord.length() * sizeLetter > inkContainerValue) {
            Assert.assertEquals(word.substring(0, inkContainerValue), fitWord);
        }
    }

    @Test(dataProvider = "InkEqualSize")
    public void testStringSize(int inkContainerValue, double sizeLetter, String bigWord, int stringSize) {
        Pen pen = new Pen(inkContainerValue, sizeLetter, bigWord);
        String word = pen.write(bigWord);
        if (inkContainerValue == sizeLetter) {
            Assert.assertEquals(word.length(), stringSize);
        }


    }

}

